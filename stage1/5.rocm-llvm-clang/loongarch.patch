diff --git a/clang-tools-extra/amdllvm/CMakeLists.txt b/clang-tools-extra/amdllvm/CMakeLists.txt
index 694b1aaf8925..3aa3c4a9e85c 100644
--- a/clang-tools-extra/amdllvm/CMakeLists.txt
+++ b/clang-tools-extra/amdllvm/CMakeLists.txt
@@ -4,8 +4,6 @@ if(UNIX AND LIBCXX_ENABLE_STATIC AND LIBCXXABI_ENABLE_STATIC)
 
     DEPENDS
     clang
-    runtimes
-    lld
   )
 
   # This tool has a dependency on C++17 filesystem library;
diff --git a/amd/comgr/CMakeLists.txt b/amd/comgr/CMakeLists.txt
index 8994b182e4ae..f8dea7f5ff72 100644
--- a/amd/comgr/CMakeLists.txt
+++ b/amd/comgr/CMakeLists.txt
@@ -362,7 +362,12 @@ install(FILES
 
 if(TARGET clangFrontendTool)
   set(CLANG_LIBS
-    clangFrontendTool)
+    clangFrontendTool
+    clangFrontend
+    clangDriver
+    clangSerialization
+    clangBasic
+    )
 else()
   set(CLANG_LIBS
     clang-cpp)
@@ -377,6 +382,21 @@ if (LLVM_LINK_LLVM_DYLIB)
 else()
   llvm_map_components_to_libnames(LLVM_LIBS
     ${LLVM_TARGETS_TO_BUILD}
+    Core
+    CodeGen
+    Option
+    MCParser
+    MC
+    TargetParser
+    Support
+    BinaryFormat
+    MCDisassembler
+    Object
+    Linker
+    BitWriter
+    IRReader
+    BitReader
+    Demangle
     DebugInfoDWARF
     Symbolize)
 endif()
diff --git a/amd/comgr/test/CMakeLists.txt b/amd/comgr/test/CMakeLists.txt
index f0e4df4bc9e1..65e4d4f85617 100644
--- a/amd/comgr/test/CMakeLists.txt
+++ b/amd/comgr/test/CMakeLists.txt
@@ -42,7 +42,7 @@ macro(add_test_input_bitcode name input output)
   add_custom_command(
     OUTPUT "${output}"
     COMMAND "$<TARGET_FILE:clang>" -c -emit-llvm -target amdgcn-amd-amdhsa
-    -mcpu=gfx900
+    -mcpu=gfx900 -nogpulib
     ${ARGN} "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
     -o "${output}"
     VERBATIM
diff --git a/amd/hipcc/src/hipBin_amd.h b/amd/hipcc/src/hipBin_amd.h
index 57d009804cfe..f53ee4a4be9e 100644
--- a/amd/hipcc/src/hipBin_amd.h
+++ b/amd/hipcc/src/hipBin_amd.h
@@ -209,7 +209,7 @@ void HipBinAmd::constructCompilerPath() {
     } else {
       compilerPath = getRoccmPath();
       hipClangPath = compilerPath;
-      hipClangPath /= "lib/llvm/bin";
+      hipClangPath /= "bin";
     }
 
     compilerPath = hipClangPath.string();
diff --git a/clang/include/clang/Basic/Builtins.def b/clang/include/clang/Basic/Builtins.def
index 4dcbaf8a7bea..4fbbd52a92b3 100644
--- a/clang/include/clang/Basic/Builtins.def
+++ b/clang/include/clang/Basic/Builtins.def
@@ -175,6 +175,7 @@ BUILTIN(__builtin_nansf, "fcC*" , "FnUE")
 BUILTIN(__builtin_nansl, "LdcC*", "FnUE")
 BUILTIN(__builtin_nansf16, "xcC*", "FnUE")
 BUILTIN(__builtin_nansf128, "LLdcC*", "FnUE")
+BUILTIN(__builtin_nansq, "LLdcC*", "FnUE")
 BUILTIN(__builtin_powi , "ddi"  , "Fnc")
 BUILTIN(__builtin_powif, "ffi"  , "Fnc")
 BUILTIN(__builtin_powil, "LdLdi", "Fnc")
diff --git a/clang/lib/AST/ExprConstant.cpp b/clang/lib/AST/ExprConstant.cpp
index 0884988c48b4..104e4ac89721 100644
--- a/clang/lib/AST/ExprConstant.cpp
+++ b/clang/lib/AST/ExprConstant.cpp
@@ -14419,6 +14419,7 @@ bool FloatExprEvaluator::VisitCallExpr(const CallExpr *E) {
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!TryEvaluateBuiltinNaN(Info.Ctx, E->getType(), E->getArg(0),
                                true, Result))
       return Error(E);
diff --git a/clang/lib/AST/Interp/InterpBuiltin.cpp b/clang/lib/AST/Interp/InterpBuiltin.cpp
index 754ca96b0c64..bb6fabcfee76 100644
--- a/clang/lib/AST/Interp/InterpBuiltin.cpp
+++ b/clang/lib/AST/Interp/InterpBuiltin.cpp
@@ -671,6 +671,7 @@ bool InterpretBuiltin(InterpState &S, CodePtr OpPC, const Function *F,
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!interp__builtin_nan(S, OpPC, Frame, F, /*Signaling=*/true))
       return false;
     break;
diff --git a/clang/lib/Basic/Targets/LoongArch.h b/clang/lib/Basic/Targets/LoongArch.h
index 3313102492cb..09e8d935ec83 100644
--- a/clang/lib/Basic/Targets/LoongArch.h
+++ b/clang/lib/Basic/Targets/LoongArch.h
@@ -44,6 +44,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   bool setCPU(const std::string &Name) override {
diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
index 13be9ce72d4d..dec302553269 100644
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -273,6 +273,7 @@ getCodeModel(const CodeGenOptions &CodeGenOpts) {
                            .Case("kernel", llvm::CodeModel::Kernel)
                            .Case("medium", llvm::CodeModel::Medium)
                            .Case("large", llvm::CodeModel::Large)
+                           .Case("extreme", llvm::CodeModel::Large)
                            .Case("default", ~1u)
                            .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
diff --git a/clang/lib/Driver/ToolChains/HIPUtility.cpp b/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 82f56277bf7d..3cfac3365dcf 100644
--- a/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -36,7 +36,11 @@ using llvm::dyn_cast;
 #endif
 
 namespace {
+#if defined(__loongarch_lp64)
+const unsigned HIPCodeObjectAlign = 65536;
+#else
 const unsigned HIPCodeObjectAlign = 4096;
+#endif
 } // namespace
 
 // Constructs a triple string for clang offload bundler.
@@ -292,7 +296,14 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch_lp64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#elif defined(__riscv) && __riscv_xlen == 64
+  std::string BundlerTargetArg = "-targets=host-riscv64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
@@ -465,6 +476,9 @@ void HIP::constructGenerateObjFileFromHIPFatBinary(
   Objf << ObjBuffer;
 
   ArgStringList McArgs{"-triple", Args.MakeArgString(HostTriple.normalize()),
+#if defined(__riscv) && __riscv_xlen == 64
+ "-target-abi=lp64d","-mattr=+d",
+#endif
                        "-o",      Output.getFilename(),
                        McinFile,  "--filetype=obj"};
   const char *Mc = Args.MakeArgString(TC.GetProgramPath("llvm-mc"));
diff --git a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 4e9b5b8ba9f5..b5607086d0af 100644
--- a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -336,15 +336,24 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   SmallVector<StringRef, 16> CmdArgs;
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
+#if defined(__loongarch64)
+  CmdArgs.push_back("-bundle-align=65536");
+#else
   CmdArgs.push_back("-bundle-align=4096");
-
+#endif
   if (Args.hasArg(OPT_compress))
     CmdArgs.push_back("-compress");
   if (auto *Arg = Args.getLastArg(OPT_compression_level_eq))
     CmdArgs.push_back(
         Args.MakeArgString(Twine("-compression-level=") + Arg->getValue()));
-
+#if defined(__x86_64)
   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+  SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#elif defined(__riscv) && __riscv_xlen == 64
+  SmallVector<StringRef> Targets = {"-targets=host-riscv64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
@@ -489,6 +498,8 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::aarch64_be:
   case Triple::ppc64:
   case Triple::ppc64le:
+  case Triple::loongarch64:
+  case Triple::riscv64:
     return generic::clang(InputFiles, Args);
   default:
     return createStringError(inconvertibleErrorCode(),
diff --git a/llvm/include/llvm/ADT/SmallVector.h b/llvm/include/llvm/ADT/SmallVector.h
index 2e6d2dc6ce90..bd3c1f0be8f5 100644
--- a/llvm/include/llvm/ADT/SmallVector.h
+++ b/llvm/include/llvm/ADT/SmallVector.h
@@ -16,6 +16,7 @@
 
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/type_traits.h"
+#include <cstdint>
 #include <algorithm>
 #include <cassert>
 #include <cstddef>
diff --git a/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h b/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
index 006115ba14fc..595188913bb1 100644
--- a/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
+++ b/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
@@ -16,6 +16,7 @@
 #define LLVM_LIB_TARGET_AMDGPU_MCTARGETDESC_AMDGPUMCTARGETDESC_H
 
 #include <memory>
+#include <cstdint>
 
 namespace llvm {
 class Target;
diff --git a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 70f782b81270..3d06492134b3 100644
--- a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -325,6 +325,19 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
   setTargetDAGCombine(ISD::OR);
   setTargetDAGCombine(ISD::SRL);
 
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
   // Set DAG combine for 'LSX' feature.
 
   if (Subtarget.hasExtLSX())
diff --git a/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.h b/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.h
index 437a7bd6ff6c..8766201add1b 100644
--- a/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.h
+++ b/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.h
@@ -15,6 +15,7 @@
 
 #include <memory>
 #include <string>
+#include <cstdint>
 
 namespace llvm {
 class formatted_raw_ostream;
diff --git a/llvm/tools/llvm-split/CMakeLists.txt b/llvm/tools/llvm-split/CMakeLists.txt
index 0579298462d1..1104e3145952 100644
--- a/llvm/tools/llvm-split/CMakeLists.txt
+++ b/llvm/tools/llvm-split/CMakeLists.txt
@@ -11,6 +11,7 @@ set(LLVM_LINK_COMPONENTS
   MC
   Support
   Target
+  TargetParser
   )
 
 add_llvm_tool(llvm-split
diff --git a/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h b/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
index 6e617ef40a53..10d75e0f6b86 100644
--- a/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
+++ b/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
@@ -9,6 +9,7 @@
 #ifndef MLIR_DIALECT_AFFINE_IR_VALUEBOUNDSOPINTERFACEIMPL_H
 #define MLIR_DIALECT_AFFINE_IR_VALUEBOUNDSOPINTERFACEIMPL_H
 
+#include <cstdint>
 #include "mlir/Support/LogicalResult.h"
 
 namespace mlir {
diff --git a/mlir/include/mlir/Target/SPIRV/Deserialization.h b/mlir/include/mlir/Target/SPIRV/Deserialization.h
index e39258beeaac..1579862a3902 100644
--- a/mlir/include/mlir/Target/SPIRV/Deserialization.h
+++ b/mlir/include/mlir/Target/SPIRV/Deserialization.h
@@ -12,7 +12,7 @@
 
 #ifndef MLIR_TARGET_SPIRV_DESERIALIZATION_H
 #define MLIR_TARGET_SPIRV_DESERIALIZATION_H
-
+#include <cstdint>
 #include "mlir/IR/OwningOpRef.h"
 #include "mlir/Support/LLVM.h"
 
diff --git a/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt b/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
index 1f0a2a5aaba0..0a7dbec18f3f 100644
--- a/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
+++ b/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
@@ -34,7 +34,7 @@ if(SANITIZER_AMDGPU)
   find_package(amd_comgr QUIET 2.4.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
 endif()
 
-if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux"))
+if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)|(loongarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux"))
   libomptarget_say("Not building AMDGPU NextGen plugin: only support AMDGPU in Linux x86_64, ppc64le, or aarch64 hosts")
   return()
 endif()
