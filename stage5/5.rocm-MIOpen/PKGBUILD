pkgbase='rocm-MIOpen'
pkgname=('rocm-MIOpen')
pkgver=6.3.2
pkgrel=632000
pkgdesc="rocm-core is a utility which can be used to get ROCm release version."
arch=('loong64' 'x86_64')
license=('MIT')
url="https://github.com/ROCm/ROCT-Thunk-Interface.git"

source=(
    "git+https://github.com/ROCm/MIOpen.git#tag=rocm-$pkgver"
    "miopen.patch"
)
b2sums=('SKIP' 'SKIP')
depends=(
  "rocm-clr=${pkgver}"
  "rocm-rocBLAS=${pkgver}"
  "rocm-rocMLIR=${pkgver}"
  "rocm-composable_kernel=${pkgver}"
)
PATH=/opt/rocm-${pkgver}/bin:$PATH
# If MIOpen use CK
# then set AMDGPU_TARGETS
#  is not useful
unset AMDGPU_TARGETS

prepare() {
#git lfs fetch -a

  cd MIOpen
    git lfs checkout
    git apply ../miopen.patch
  cd ..
  mkdir build || true
  cd build
  EXT_CFLAGS="-pipe -fopenmp -Wl,-rpath=/opt/rocm-${pkgver}/lib -Wl,-rpath=/opt/rocm-${pkgver}/lib/llvm/lib -fPIC -stdlib=libc++ -Wno-gnu-line-marker -L/opt/rocm-${pkgver}/lib/llvm/lib -I/opt/rocm-${pkgver}/lib/llvm/include/c++/v1 -Wno-unused-command-line-argument -I/opt/rocm-${pkgver}/include  -L/opt/rocm-${pkgver}/lib -fexperimental-library -mcmodel=extreme"
  cmake ../MIOpen \
   -DMIOPEN_BACKEND=HIP \
   -DCMAKE_BUILD_TYPE=RelWithDebInfo \
   -DCMAKE_C_COMPILER=/opt/rocm-${pkgver}/lib/llvm/bin/clang \
   -DMIOPEN_HIP_COMPILER=/opt/rocm-${pkgver}/lib/llvm/bin/clang++ \
   -DCMAKE_FIND_ROOT_PATH=/opt/rocm-${pkgver}/ \
   -DCMAKE_CXX_COMPILER=/opt/rocm-${pkgver}/bin/hipcc \
   -DCMAKE_CXX_FLAGS="$EXT_CFLAGS" \
   -DCMAKE_C_FLAGS="$EXT_CFLAGS" \
   -DCMAKE_PREFIX_PATH="/opt/rocm-${pkgver}/;/opt/rocm-${pkgver}/lib;/usr" \
   -DCMAKE_INSTALL_PREFIX=/opt/rocm-${pkgver} \
   -DBUILD_SHARED_LIBS=ON \
   -DBUILD_DEV=OFF \
   -DMIOPEN_ENABLE_FIN=OFF \
   -DMIOPEN_BUILD_DRIVER=ON \
   -DBoost_USE_STATIC_LIBS=OFF \
   -DBUILD_TESTING=OFF \
   -DMIOPEN_USE_COMPOSABLEKERNEL=ON \
   -DCMAKE_SHARED_LINKER_FLAGS="-L/opt/rocm-${pkgver}/lib64" \
   -DCMAKE_INSTALL_RPATH="/opt/rocm-${pkgver}/lib;/opt/rocm-${pkgver}/lib/llvm/lib;/opt/rocm-${pkgver}/lib64" \
   -DCMAKE_BUILD_RPATH="/opt/rocm-${pkgver}/lib;/opt/rocm-${pkgver}/lib/llvm/lib;/opt/rocm-${pkgver}/lib64" \
  -G "Unix Makefiles"
}
build() {
  mkdir build || true
  cd build
#  sed -i "s!-lroctx64!-L/home/xinmu/rocm-loongarch/stage4/03.rocm-rocMLIR/src/build/external/llvm-project/llvm/lib -lLLVMLoongArchAsmParser -lLLVMLoongArchDesc -lLLVMLoongArchDisassembler -lLLVMLoongArchCodeGen -lLLVMLoongArchInfo /opt/rocm-${pkgver}/lib/libclang.so -lrockCompiler /opt/rocm-${pkgver}/lib64/libamd_comgr.so /opt/rocm-${pkgver}/lib64/libroctx64.so!g" src/CMakeFiles/MIOpen.dir/link.txt
#  sed -i "s!-lhiprtc!/opt/rocm-${pkgver}/lib64/libhiprtc.so!g" src/CMakeFiles/MIOpen.dir/link.txt
#  sed -i "s!-lrocrand!-L/home/xinmu/rocm-loongarch/stage4/03.rocm-rocMLIR/src/build/external/llvm-project/llvm/lib -lLLVMLoongArchAsmParser -lLLVMLoongArchDesc -lLLVMLoongArchDisassembler -lLLVMLoongArchCodeGen -lLLVMLoongArchInfo /opt/rocm-${pkgver}/lib/libclang.so -lrockCompiler /opt/rocm-${pkgver}/lib64/libamd_comgr.so /opt/rocm-${pkgver}/lib/librocrand-d.so!g" driver/CMakeFiles/MIOpenDriver.dir/link.txt
  make -j$(nproc) 
}

check() {
#  cd "ROCm-CompilerSupport"
#  cd build
#  make ctest
echo
}

#packaging() {

#}
package() {
  cd build
  make DESTDIR="$pkgdir/" install
}
